/* CONFIG */
$grid-gutter-width: 15px;
@custom-media --small-viewport (min-width: 576px);
@custom-media --medium-viewport (min-width: 768px);
@custom-media --large-viewport (min-width: 992px);

/* HELPER FUNCTIONS */

/* CSS-GRID MIXINS*/
/**
 * @itemPerRow {number} Given a number which correponds to the desired number of items per row (e.g: column size).
 * build the classes that will set the column template and reset whatever flexbox fallback were created.
 */
@define-mixin make-grid-with-columns $itemPerRow {
  .grid--$(itemPerRow) {
    grid-template-columns: repeat($itemPerRow, 1fr);
  }

  .grid--$(itemPerRow) .grid__item {
    margin-bottom: initial;
    width: 100%;
    max-width: 100%;
  }
}

/**
 * @itemPerRow {number} Given a number which correponds to the desired number of items per row (e.g: column size).
 * build the classes that will set the column template and reset whatever flexbox fallback were created.
 * @mq {string} media query identifier. e.g: lg, md, xs or whatever you want really.
 */
@define-mixin make-grid-with-columns-mq $itemPerRow, $mq {
  .grid--$(itemPerRow)-$(mq) {
    grid-template-columns: repeat($itemPerRow, 1fr);
  }

  .grid--$(itemPerRow) .grid__item {
    margin-bottom: initial;
    width: 100%;
    max-width: 100%;
  }
}

/**
 * @itemPerRow {number} Given a number which correponds to the desired number of items per row (e.g: column size).
 * build the classes that are used to augment a grid-item. e.g: add more columns and stuff.
 * @mq {string} media query identifier. e.g: lg, md, xs or whatever you want really.
 */
@define-mixin make-grid-item-extensions-mq $itemPerRow, $mq {
  .grid__item--wide-$(itemPerRow)-$(mq) {
    grid-column-end: span $(itemPerRow);
  }

  .grid__item--tall-$(itemPerRow)-$(mq) {
    grid-row-end: span $(itemPerRow);
  }
}

/* FALLBACK MIXINS */
@define-mixin make-grid-with-columns-fallback $itemPerRow {
  .grid--$(itemPerRow) .grid__item {
    flex: 0 0 calc(100 / $itemPerRow)%;
    max-width: calc(100 / $itemPerRow)%;
    margin-bottom: $grid-gutter-width;
  }

  .grid--$(itemPerRow) .grid__item:nth-last-child(-n + $itemPerRow) {
    margin: initial;
  }
}

/* CSS GRIDS Fallbacks! */
.grid {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: -$grid-gutter-width;
  margin-left: -$grid-gutter-width;
}

.grid__item {
  box-sizing: border-box;
  padding-right: $grid-gutter-width;
  padding-left: $grid-gutter-width;
}

@for $i from 1 to 10 {
  @mixin make-grid-with-columns-fallback $i
}

/* Here be the css-grid */
@supports (display: grid) {
  .grid {
    display: grid;
    margin-left: initial;
    margin-right: initial;
    grid-gap: calc($grid-gutter-width * 2);
  }

  .grid--close {
    grid-gap: calc($grid-gutter-width);
  }

  .grid--relaxed {
    grid-gap: calc($grid-gutter-width * 3);
  }

  /* Reset our grid Items */
  .grid__item {
    padding: initial;
    padding-right: initial;
    padding-left: initial;
  }

  /* Build our columns */
  @for $i from 1 to 10 {
    @mixin make-grid-with-columns $i;
  }

  /* Build our classes to let grid items take more space on demand */
  @for $i from 1 to 10 {
    .grid__item--wide-$i {
      grid-column-end: span $(i);
    }
  
    .grid__item--tall-$i {
      grid-row-end: span $(i);
    }
  }

  /* Build our columns -- Responsive */
  @each $cmedia, $mq in (large, medium, small), (lg, md, sm) {
    @media (--$(cmedia)-viewport) {
      @for $i from 1 to 10 {
        @mixin make-grid-with-columns-mq $i, $(mq);
        @mixin make-grid-item-extensions-mq $i, $(mq);
      }
    }
  }

  /* Build our classes to let grid items take more space on demand -- Responsive */
}
